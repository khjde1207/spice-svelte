(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1595927721227;

	const files = [
		"service-worker-index.html",
		"favicon.png",
		"global.css",
		"logo-192.png",
		"logo-512.png",
		"manifest.json",
		"spice-html5/.git/HEAD",
		"spice-html5/.git/config",
		"spice-html5/.git/description",
		"spice-html5/.git/hooks/applypatch-msg.sample",
		"spice-html5/.git/hooks/commit-msg.sample",
		"spice-html5/.git/hooks/fsmonitor-watchman.sample",
		"spice-html5/.git/hooks/post-update.sample",
		"spice-html5/.git/hooks/pre-applypatch.sample",
		"spice-html5/.git/hooks/pre-commit.sample",
		"spice-html5/.git/hooks/pre-merge-commit.sample",
		"spice-html5/.git/hooks/pre-push.sample",
		"spice-html5/.git/hooks/pre-rebase.sample",
		"spice-html5/.git/hooks/pre-receive.sample",
		"spice-html5/.git/hooks/prepare-commit-msg.sample",
		"spice-html5/.git/hooks/update.sample",
		"spice-html5/.git/index",
		"spice-html5/.git/info/exclude",
		"spice-html5/.git/logs/HEAD",
		"spice-html5/.git/logs/refs/heads/master",
		"spice-html5/.git/logs/refs/remotes/origin/HEAD",
		"spice-html5/.git/objects/pack/pack-a17b0f0ebbb3c7aabcfd54a981c892175e2ae137.idx",
		"spice-html5/.git/objects/pack/pack-a17b0f0ebbb3c7aabcfd54a981c892175e2ae137.pack",
		"spice-html5/.git/packed-refs",
		"spice-html5/.git/refs/heads/master",
		"spice-html5/.git/refs/remotes/origin/HEAD",
		"spice-html5/.gitignore",
		"spice-html5/COPYING",
		"spice-html5/COPYING.LESSER",
		"spice-html5/Makefile",
		"spice-html5/README",
		"spice-html5/TODO",
		"spice-html5/apache.conf.sample",
		"spice-html5/package.json.in",
		"spice-html5/spice-html5.spec.in",
		"spice-html5/spice.css",
		"spice-html5/spice.html",
		"spice-html5/spice_auto.html",
		"spice-html5/src/atKeynames.js",
		"spice-html5/src/bitmap.js",
		"spice-html5/src/cursor.js",
		"spice-html5/src/display.js",
		"spice-html5/src/enums.js",
		"spice-html5/src/filexfer.js",
		"spice-html5/src/inputs.js",
		"spice-html5/src/lz.js",
		"spice-html5/src/main.js",
		"spice-html5/src/playback.js",
		"spice-html5/src/png.js",
		"spice-html5/src/port.js",
		"spice-html5/src/quic.js",
		"spice-html5/src/resize.js",
		"spice-html5/src/simulatecursor.js",
		"spice-html5/src/spicearraybuffer.js",
		"spice-html5/src/spiceconn.js",
		"spice-html5/src/spicedataview.js",
		"spice-html5/src/spicemsg.js",
		"spice-html5/src/spicetype.js",
		"spice-html5/src/thirdparty/browser-es-module-loader/.npmignore",
		"spice-html5/src/thirdparty/browser-es-module-loader/README.md",
		"spice-html5/src/thirdparty/browser-es-module-loader/dist/babel-worker.js",
		"spice-html5/src/thirdparty/browser-es-module-loader/dist/browser-es-module-loader.js",
		"spice-html5/src/thirdparty/browser-es-module-loader/dist/browser-es-module-loader.js.map",
		"spice-html5/src/thirdparty/browser-es-module-loader/rollup.config.js",
		"spice-html5/src/thirdparty/browser-es-module-loader/src/babel-worker.js",
		"spice-html5/src/thirdparty/browser-es-module-loader/src/browser-es-module-loader.js",
		"spice-html5/src/thirdparty/jsbn.js",
		"spice-html5/src/thirdparty/prng4.js",
		"spice-html5/src/thirdparty/rng.js",
		"spice-html5/src/thirdparty/rsa.js",
		"spice-html5/src/thirdparty/sha1.js",
		"spice-html5/src/ticket.js",
		"spice-html5/src/utils.js",
		"spice-html5/src/webm.js",
		"spice-html5/src/wire.js",
		"successkid.jpg"
	];

	const shell = [
		"client/client.d74d45e7.js",
		"client/index.01043a82.js",
		"client/sapper-dev-client.1e7a4a5e.js"
	];

	const ASSETS = `cache${timestamp}`;

	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const cached = new Set(to_cache);

	self.addEventListener('install', event => {
		event.waitUntil(
			caches
				.open(ASSETS)
				.then(cache => cache.addAll(to_cache))
				.then(() => {
					self.skipWaiting();
				})
		);
	});

	self.addEventListener('activate', event => {
		event.waitUntil(
			caches.keys().then(async keys => {
				// delete old caches
				for (const key of keys) {
					if (key !== ASSETS) await caches.delete(key);
				}

				self.clients.claim();
			})
		);
	});

	self.addEventListener('fetch', event => {
		if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

		const url = new URL(event.request.url);

		// don't try to handle e.g. data: URIs
		if (!url.protocol.startsWith('http')) return;

		// ignore dev server requests
		if (url.hostname === self.location.hostname && url.port !== self.location.port) return;

		// always serve static files and bundler-generated assets from cache
		if (url.host === self.location.host && cached.has(url.pathname)) {
			event.respondWith(caches.match(event.request));
			return;
		}

		// for pages, you might want to serve a shell `service-worker-index.html` file,
		// which Sapper has generated for you. It's not right for every
		// app, but if it's right for yours then uncomment this section
		/*
		if (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
			event.respondWith(caches.match('/service-worker-index.html'));
			return;
		}
		*/

		if (event.request.cache === 'only-if-cached') return;

		// for everything else, try the network first, falling back to
		// cache if the user is offline. (If the pages never change, you
		// might prefer a cache-first approach to a network-first one.)
		event.respondWith(
			caches
				.open(`offline${timestamp}`)
				.then(async cache => {
					try {
						const response = await fetch(event.request);
						cache.put(event.request, response.clone());
						return response;
					} catch(err) {
						const response = await cache.match(event.request);
						if (response) return response;

						throw err;
					}
				})
		);
	});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
